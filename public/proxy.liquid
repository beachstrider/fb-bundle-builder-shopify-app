{% capture content_for_header%}
  {% capture site_name %} PAGE_TITLE {% endcapture %}
  {% capture page_title %} PAGE_TITLE {% endcapture %}
  {% capture page_description %} PAGE_DESCRIPTION {% endcapture %} 
{% endcapture %}
<script>
{% if customer %}
  const shopCustomer = {
    id: `{{ customer.id}}`,
    fullName: '{{ customer.first_name }} {{ customer.first_name }}',
    firstName: '{{ customer.first_name }}',
    lastName: '{{ customer.first_name }}',
    email: '{{ customer.email }}',
    orders: [
      {% for order in customer.orders %}
        {
          id: '{{ order.id }}',
          orderDate: '{{ order.created_at | date: "%FT%H:%M%z" }}',
          orderTotal: '{{ order.total_price | money_with_currency }}',
          lineItems: [
            {% for item in order.line_items %}
            {
              productId: '{{ item.product_id }}',
              title: '{{ item.title }}',
              quantity: '{{ item.quantity }}'
            },
            {% endfor %}
          ],
          orderLink: '{{ order.customer_url }}',
          fulfillments: [
          {% for fulfillment in order.fulfillments %}
              {
                trackingCompany: '{{ fulfillment.tracking_company }}',
                trackinNumber: '{{ fulfillment.tracking_number }}',
                trackingUrl: '{{ fulfillment.tracking_url }}',
              },
            {% endfor %}
          ],
          transactions: [
            {% for transaction in order.transactions %}
              {
                cardNumber :'{{ transaction.payment_details.credit_card_number }}'
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ]
        },
      {% endfor %}
    ],
    paymentInfo: {
      cardName:'{{ customer.first_name }} {{ customer.first_name }}',
      orderName: '{{ lastOrder.name }}',
      transactionName: '{{ lastTransaction.name }}',
      cardNumber: '{{ lastTransaction.payment_details }}',
      billingAddres: {
        address1:'{{ customer.default_address.address1 }}',
        address2:'{{ customer.default_address.address2 }}',
        street: '{{ customer.default_address.street }}',
        city:'{{ customer.default_address.city }}',
        company:'{{ customer.default_address.company}}',
        country:'{{ customer.default_address.country }}',
        countryCode:'{{ customer.default_address.country_code }}',
        province:'{{ customer.default_address.province }}',
        phone:'{{ customer.default_address.phone }}',
        provinceCode:'{{ customer.default_address.province_code }}',
        zip:'{{ customer.default_address.zip }}'
      }
    },
    address: {
      address1:'{{ customer.default_address.address1 }}',
      address2:'{{ customer.default_address.address2 }}',
      street: '{{ customer.default_address.street }}',
      city:'{{ customer.default_address.city }}',
      company:'{{ customer.default_address.company}}',
      country:'{{ customer.default_address.country }}',
      countryCode:'{{ customer.default_address.country_code }}',
      province:'{{ customer.default_address.province }}',
      phone:'{{ customer.default_address.phone }}',
      provinceCode:'{{ customer.default_address.province_code }}',
      zip:'{{ customer.default_address.zip }}'
    }
  };
{% else %}
  const shopCustomer = {  
    id: 0,
    fullName: '',
    firstName: '',
    lastName: '',
    email: '',
    orders: [],
    paymentInfo: {
      cardName:'',
      cardNumber: '',
      billingAddres: {
        address1:'',
        address2:'',
        street:'',
        city:'',
        company:'',
        country:'',
        countryCode:'',
        province:'',
        phone:'',
        provinceCode:'',
        zip:'',
      }
    },
    address: {
      address1:'',
      address2:'',
      street:'',
      city:'',
      company:'',
      country:'',
      countryCode:'',
      province:'',
      phone:'',
      provinceCode:'',
      zip:'',
     },
     fulfillments: []
   };
  {% endif %}


// Pull bundles and menu items
let shopProducts = [];
let shopBundles = [];

// variables are used to map objects
let currentProduct = {}
let currentVariant = {}

function convertToTitle(str) {
  return str
        .split('_')
        .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())
        .join(' ')
}

function createEmptyMetafields(currentObject) {
  if (!currentObject.metafields) {
    currentObject.metafields = []
  }
  return currentObject
}

function getMetafieldKey(string) {
  return string.split('.')[1]
}
{% assign variantNutritionMetaKeys = 'contains,ingredients,subtitle,calorie_range,is_spicy,is_peanut_free,is_gluten_free,is_dairy_free,average_macros' | split: ',' %}
{% assign productVariantMetaKeys = 'carbs,net_carbs,protein,fat' | split: ',' %}


currentProduct = {}
currentVariant = {}
{% assign variantMetaKeys = 'calories,net_carbs,protein,total_fat' | split: ',' %}
{% if collections["SHOPIFY_PRODUCTS_COLLECTION"] %}
  {% paginate collections["SHOPIFY_PRODUCTS_COLLECTION"].products by 1000 %}
    {% for product in collections["SHOPIFY_PRODUCTS_COLLECTION"].products %}
      currentProduct = createEmptyMetafields({{ product | json }})

      {% for variant in product.variants %}
        currentVariant = createEmptyMetafields(currentProduct.variants.find((v) => Number(v.id) === Number('{{ variant.id }}'))) 
        {% for variantNutritionMetaKey in variantNutritionMetaKeys %}
          currentVariant.metafields.push({
            key: '{{ variantNutritionMetaKey }}',
            name: convertToTitle(`{{ variantNutritionMetaKey }}`), 
            value: `{{ variant.metafields.nutrition[variantNutritionMetaKey] | escape }}`
          })            
        {% endfor %}    
        {% for variantMetaKey in variantMetaKeys %}
          currentVariant.metafields.push({ 
            key: '{{ variantMetaKey }}',
            name: convertToTitle(`{{ variantMetaKey }}`), 
            value: `{{ variant.metafields.my_fields[variantMetaKey].value | escape }}`
          })            
        {% endfor %}
      {% endfor %}
      shopProducts.push(currentProduct)
    {% endfor %}
  {% endpaginate %}
{% endif %}

let currentProductKey = ''
{% assign bundleBuilderMetaKeys = 'bundle_key_points' | split: ',' %}
{% if collections["SHOPIFY_BUNDLES_COLLECTION"] %}
  {% paginate collections["SHOPIFY_BUNDLES_COLLECTION"].products by 1000 %}
    {% for product in collections["SHOPIFY_BUNDLES_COLLECTION"].products %}      
      currentProduct = createEmptyMetafields({{ product | json }})        
    
                         
      {% for variant in product.variants %}       
        currentVariant = createEmptyMetafields(currentProduct.variants.find((v) => Number(v.id) === Number('{{ variant.id }}')))
        
        {% for variantNutritionMetaKey in variantNutritionMetaKeys %}
          currentVariant.metafields.push({
            key: '{{ variantNutritionMetaKey }}',
            name: convertToTitle(`{{ variantNutritionMetaKey }}`), 
            value: `{{ variant.metafields.nutrition[variantNutritionMetaKey] | escape}}`
          })            
        {% endfor %}   

        {% for bundleBuilderMetaKey in bundleBuilderMetaKeys %}
          currentProductKey = '{{ variant.option1 }}'.toLowerCase() + '_' + '{{ bundleBuilderMetaKey }}'
          if (!currentProduct.metafields.find((metafield) => metafield.key === currentProductKey)) {            
            {% assign productMetafieldKey = variant.option1 | append: '_' | append: bundleBuilderMetaKey | downcase %}

            currentProduct.metafields.push({ 
              key: currentProductKey,
              name: convertToTitle(`{{ bundleBuilderMetaKey }}`), 
              value: `{{ product.metafields.bundle-builder[productMetafieldKey] | escape }}`
            })            
          }
        {% endfor %}
        
        {% for productVariantMetaKey in productVariantMetaKeys %} 
          currentProductKey = '{{ variant.option1 }}'.toLowerCase() + '_' + '{{ productVariantMetaKey }}'
          if (!currentProduct.metafields.find((metafield) => metafield.key === currentProductKey)) {            
            {% assign productMetafieldKey = variant.option1 | append: '_' | append: productVariantMetaKey | downcase %}

            currentProduct.metafields.push({ 
              key: currentProductKey,
              name: convertToTitle(`{{ productVariantMetaKey }}`), 
              value: `{{ product.metafields.nutrition[productMetafieldKey] | escape }}`
            })            
          }
          
        {% endfor %}
      {% endfor %}
            
      shopBundles.push(currentProduct)
    {% endfor %}
  {% endpaginate %}
{% endif %}

const shopDomain = '{{ shop.permanent_domain }}';
</script>

<div id="root"></div>
<script src="APP_BUNDLE_URL"></script>